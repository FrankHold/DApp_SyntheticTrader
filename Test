Let's test 


0x4473c43D15606063E4E1ed5E72AB1B80f872519F

Empty contract no funds
0 buy and 0 sell offers
Ref_price 1000000000000000000
sU 1000000000000000000

-------------------------------------------------------------------------------------------------------------
Sending 2 Ether to the contract from account 0x075a36E8827CE7791E5D05A346eD348aEadE5C21

0x075a36E8827CE7791E5D05A346eD348aEadE5C21
Own_funds     2000000000000000000

-------------------------------------------------------------------------------------------------------------
Sending 1 Ether to the contract from account 0x30375eAD12CDa23efA3569Ca3666Cd2DE7361882 

0x30375eAD12CDa23efA3569Ca3666Cd2DE7361882
Own_funds     1000000000000000000

-------------------------------------------------------------------------------------------------------------
Buy_Order Amount 20000000000000000 Price 900000000000000000 from 0x075a36E8827CE7791E5D05A346eD348aEadE5C21

No_buy_Orders 1
buy[1].Amount   20000000000000000
buy[1].Price    900000000000000000
buy[1].Address  0x075a36E8827CE7791E5D05A346eD348aEadE5C21
Own_Security    0
Own_Amount      0
Own_Funds       1982000000000000000 [=2000000000000000000-20000000000000000*900000000000000000/1000000000000000000] OK
Own_FeedBack    12 32 34 01         OK

-------------------------------------------------------------------------------------------------------------
Sell_Order Amount 40000000000000000 Price 1100000000000000000 from 0x075a36E8827CE7791E5D05A346eD348aEadE5C21

No_sell_Orders 1
sell[1].Amount  40000000000000000
sell[1].Price   1100000000000000000
sell[1].Address 0x075a36E8827CE7791E5D05A346eD348aEadE5C21
Own_Security    40000000000000000   [=40000000000000000*1000000000000000000/1000000000000000000] OK
Own_Amount      -40000000000000000  OK
Own_Funds       1942000000000000000 [=1982000000000000000-40000000000000000*1000000000000000000/1000000000000000000] OK
Own_FeedBack    11 31 33 01         OK

-------------------------------------------------------------------------------------------------------------
Sell_Order Amount 30000000000000000 Price 1130000000000000000 from 0x30375eAD12CDa23efA3569Ca3666Cd2DE7361882

No_sell_Orders 2
sell[2].Amount  40000000000000000
sell[2].Price   1100000000000000000
sell[2].Address 0x075a36E8827CE7791E5D05A346eD348aEadE5C21
sell[1].Amount  30000000000000000
sell[1].Price   1130000000000000000
sell[1].Address 0x30375eAD12CDa23efA3569Ca3666Cd2DE7361882
Own_Security    30000000000000000   [=30000000000000000*1000000000000000000/1000000000000000000] OK
Own_Amount      -30000000000000000  OK
Own_Funds       970000000000000000  [=1000000000000000000-30000000000000000*1000000000000000000/1000000000000000000] OK
Own_FeedBack    11 31 33 01         OK

-------------------------------------------------------------------------------------------------------------
Buy_Order Amount 10000000000000000 Price 950000000000000000 from 0x30375eAD12CDa23efA3569Ca3666Cd2DE7361882

No_buy_Orders 2
buy[2].Amount   10000000000000000
buy[2].Price    950000000000000000
buy[2].Address  0x30375eAD12CDa23efA3569Ca3666Cd2DE7361882
buy[1].Amount   20000000000000000
buy[1].Price    900000000000000000
buy[1].Address  0x075a36E8827CE7791E5D05A346eD348aEadE5C21
Own_Security    30000000000000000
Own_Amount      -30000000000000000
Own_Funds       960500000000000000  [=970000000000000000-10000000000000000*950000000000000000/1000000000000000000] OK
Own_FeedBack    12 32 34 02         OK

-------------------------------------------------------------------------------------------------------------

Buy_Order Amount 15000000000000000 Price 1100000000000000000 from 0x30375eAD12CDa23efA3569Ca3666Cd2DE7361882

sell[2].Amount  25000000000000000 [40000000000000000 - 15000000000000000] OK
sell[2].Price   1100000000000000000
sell[2].Address 0x075a36E8827CE7791E5D05A346eD348aEadE5C21

0x30375eAD12CDa23efA3569Ca3666Cd2DE7361882
Own_Security    15000000000000000      
                                    30000000000000000 - 30000000000000000 * 15000000000000000 (--30000000000000000) 
                                    15000000000000000   OK
  
Own_Amount      -15000000000000000  [-30000000000000000--15000000000000000] OK
Own_Funds       959000000000000000  
                                    960500000000000000+30000000000000000*15000000000000000/(--30000000000000000) = 975500000000000000
                                    975500000000000000-15000000000000000*1100000000000000000/1000000000000000000
                                    959000000000000000  OK

0x075a36E8827CE7791E5D05A346eD348aEadE5C21
Own_Security    56500000000000000   []
Own_Amount      -40000000000000000  []
Own_Funds       1942000000000000000 []

Ref_Price       1001000000000000000 [(1000000000000000000*99+1100000000000000000)/100] OK
Own_FeedBack    12 22 24 26         OK










---------------------------------------------------------------------------------------------------------------------------------
0x7157678ed82BA97A734b5e4c6E3076d003E48671

Error

function Create_Sell_Order() internal { // internal 
         Own_FeedBack[msg.sender] = Own_FeedBack[msg.sender] * 100 + 31; // 31 = Create_Sell_Order 

Amount = min(Amount, max(Own_Amount[msg.sender],0) + Own_Funds[msg.sender] / Ref_Price * sU);
       = min(30000000000000000, max(0,0) + 1000000000000000000/1000000000000000100*1000000000000000000)
       = min(30000000000000000,     0    + 1000000000000000000)
       = 30000000000000000

must somehow result in 0 ??

Error:  min( ... , max( ... , ...) )
Better: max( ... , ...); min( ... , ... );


------------------------ TEST CONTRACT -----------------------------

contract Test {

    int public Test_A;
    int public Test_B;
    int public Test_C;
    int public Test_D;
    int public Test_E;
    int public Test_F;

    function () { // send ether
    } 
    
    function Test() { // first call
    }
 
    function Test_Test() {
        Test_A = 100;
        Test_B =  50;
        Test_C = 100;
        Test_D = 100;
        Test_E = 100;
        Test_F = 100;
                                                    // Exp. // Result
        Test_C = Test_B / Test_A * Test_E;          // 50   // 0        <------- !!!!!
        Test_D = Test_B * Test_E / Test_A;          // 50   // 50
        Test_E = max(Test_B , 0);                   // 50   // 50
        Test_F = max(Test_B * Test_E / Test_A , 0); // 25   // 25
    }   
    
  function max(int a, int b) returns (int) {
    if (a > b) return a;
    else return b;
  }
  function min(int a, int b)returns (int) {
    if (a < b) return a;
    else return b;
  }

}
